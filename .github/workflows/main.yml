name: Build RustDesk macOS Universal

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-universal:
    runs-on: macos-latest
    env:
      FLUTTER_DIR: flutter
      APP_NAME: RustDesk
      FLUTTER_VERSION: 3.24.4

    steps:
    - name: Checkout (with submodules)
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        version: ${{ env.FLUTTER_VERSION }}

    - name: Diagnostic
      run: |
        echo "arch=$(uname -m)"
        xcrun xcodebuild -version
        flutter --version

    - name: Generate flutter_rust_bridge bindings
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter pub get
        flutter pub run flutter_rust_bridge_codegen \
          --rust-input ../src/flutter_ffi.rs \
          --dart-output lib/generated_bridge.dart

    - name: CocoaPods install (Intel + ARM)
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter pub get
        arch -x86_64 pod install --project-directory=macos
        arch -arm64 pod install --project-directory=macos

    - name: Build macOS release
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter clean
        flutter build macos --release --dart-define=BUNDLE_MODE=true

    - name: Package and Lipo check
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}/build/macos/Build/Products/Release
        lipo -archs ${APP_NAME}.app/Contents/MacOS/${APP_NAME}

    - name: Sign all dylibs & frameworks
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}/build/macos/Build/Products/Release
        find ${APP_NAME}.app -type f \( -name '*.dylib' -or -name '*.framework' \) \
          -exec codesign --force --options runtime --sign - {} \;
        codesign --force --options runtime --deep --sign - \
          --entitlements Runner/Release.entitlements \
          "${APP_NAME}.app"

    - name: Create DMG
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}/build/macos/Build/Products/Release
        tmp=$(mktemp -d)
        mkdir "$tmp/RustDesk"
        cp -R "${APP_NAME}.app" "$tmp/RustDesk/"
        hdiutil create -volname "RustDesk" -srcfolder "$tmp/RustDesk" \
          -ov -format UDZO "RustDesk-Universal-$(date +%Y%m%d).dmg"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: RustDesk-macos-universal
        path: |
          ${{ github.workspace }}/${{ env.FLUTTER_DIR }}/build/macos/Build/Products/Release/*.dmg
        retention-days: 7
