name: Build RustDesk for macOS (Intel+ARM)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-universal:
    runs-on: macos-latest  # 使用最新的 macOS 运行器
    env:
      FLUTTER_CHANNEL: stable
      APP_NAME: RustDesk

    steps:
    # 1. 检出代码（含子模块）
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2. 安装 Flutter（自动适配架构）
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        # 注意：不指定架构，让系统自适应

    # 3. 环境检查（诊断常见问题）
    - name: Diagnostic check
      run: |
        echo "System architecture: $(uname -m)"
        xcrun xcodebuild -version
        flutter doctor -v
        which pod

    # 4. 彻底清理构建环境
    - name: Deep clean workspace
      run: |
        flutter clean
        rm -rf build macos/Pods macos/Runner.xcworkspace
        pod cache clean --all

    # 5. 安装依赖（双重架构）
    - name: Install dependencies
      run: |
        flutter pub get
        
        # Intel 架构依赖
        arch -x86_64 pod install --project-directory=macos || echo "Intel pod install may have warnings"
        
        # ARM 架构依赖
        arch -arm64 pod install --project-directory=macos || echo "ARM pod install may have warnings"

    # 6. 构建通用应用（关键部分）
    - name: Build universal binary
      run: |
        # 清除旧产物
        rm -rf build/macos
        
        # 设置环境变量（解决常见Flutter问题）
        export BUNDLE_MODE=true
        export FLUTTER_SUPPRESS_ANALYTICS=true
        export FLUTTER_BUILD_MODE=release
        
        # Flutter构建命令
        flutter build macos \
          --release \
          --dart-define=BUNDLE_MODE=true \
          --no-codesign \
          --target-platform darwin-x86_64,darwin-arm64
        
        # 验证输出
        cd build/macos/Build/Products/Release
        lipo -archs ${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}

    # 7. 全面签名（解决库加载问题）
    - name: Sign entire application
      run: |
        cd build/macos/Build/Products/Release
        
        # 签名所有内部框架和库
        find "${{ env.APP_NAME }}.app" -type f \( -name "*.dylib" -or -name "*.framework" \) | while read lib; do
          codesign --force --options runtime --sign - "$lib"
        done
        
        # 签名主应用
        codesign --force --options runtime --deep --sign - \
          --entitlements ../../Runner/Release.entitlements \
          "${{ env.APP_NAME }}.app"
          
        # 双重验证签名
        echo "Signature verification:"
        codesign -dv --verbose=4 "${{ env.APP_NAME }}.app"
        spctl --assess -vvv "${{ env.APP_NAME }}.app"

    # 8. 创建安装包（直接可用的DMG）
    - name: Create universal installer
      run: |
        cd build/macos/Build/Products/Release
        
        # 创建临时文件夹
        TEMP_DIR="$(mktemp -d)"
        mkdir "$TEMP_DIR/RustDesk"
        
        # 复制应用
        cp -R "${{ env.APP_NAME }}.app" "$TEMP_DIR/RustDesk/"
        
        # 创建背景图（可选）
        convert -size 600x400 xc:white "$TEMP_DIR/background.png"
        
        # 创建DMG
        hdiutil create -volname "RustDesk" \
          -srcfolder "$TEMP_DIR/RustDesk" \
          -ov -format UDZO \
          -layout NONE \
          "RustDesk-Universal-$(date +%Y%m%d).dmg"
        
        # 清理
        rm -rf "$TEMP_DIR"
        ls -lh *.dmg

    # 9. 上传成品
    - name: Upload universal artifact
      uses: actions/upload-artifact@v4
      with:
        name: RustDesk-MacOS-Universal
        path: build/macos/Build/Products/Release/RustDesk-Universal-*.dmg
        retention-days: 7
