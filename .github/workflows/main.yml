name: Build RustDesk for macOS (Intel+ARM)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-universal:
    runs-on: macos-latest
    env:
      FLUTTER_CHANNEL: stable
      APP_NAME: RustDesk
      FLUTTER_DIR: flutter

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}

    - name: Diagnostic check
      run: |
        echo "System architecture: $(uname -m)"
        xcrun xcodebuild -version
        flutter doctor -v
        which pod

    - name: Deep clean workspace
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter clean
        rm -rf build macos/Pods macos/Runner.xcworkspace
        pod cache clean --all

    - name: Install dependencies
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter pub get
        arch -x86_64 pod install --project-directory=macos || echo "Intel pod install may have warnings"
        arch -arm64 pod install --project-directory=macos || echo "ARM pod install may have warnings"

    - name: Build universal binary
      run: |
        cd ${{ github.workspace }}/${{ env.FLUTTER_DIR }}
        flutter build macos --release --dart-define=BUNDLE_MODE=true
        cd build/macos/Build/Products/Release
        lipo -archs ${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}

    - name: Sign entire application
      run: |
        cd build/macos/Build/Products/Release
        find "${{ env.APP_NAME }}.app" -type f \( -name "*.dylib" -or -name "*.framework" \) | while read lib; do
          codesign --force --options runtime --sign - "$lib"
        done
        codesign --force --options runtime --deep --sign - --entitlements ../../Runner/Release.entitlements "${{ env.APP_NAME }}.app"
        codesign -dv --verbose=4 "${{ env.APP_NAME }}.app"
        spctl --assess -vvv "${{ env.APP_NAME }}.app"

    - name: Create universal installer
      run: |
        cd build/macos/Build/Products/Release
        TEMP_DIR="$(mktemp -d)"
        mkdir "$TEMP_DIR/RustDesk"
        cp -R "${{ env.APP_NAME }}.app" "$TEMP_DIR/RustDesk/"
        hdiutil create -volname "RustDesk" -srcfolder "$TEMP_DIR/RustDesk" -ov -format UDZO "RustDesk-Universal-$(date +%Y%m%d).dmg"
        rm -rf "$TEMP_DIR"
        ls -lh *.dmg

    - name: Upload universal artifact
      uses: actions/upload-artifact@v4
      with:
        name: RustDesk-MacOS-Universal
        path: build/macos/Build/Products/Release/RustDesk-Universal-*.dmg
        retention-days: 7
