name: Build RustDesk for macOS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      FLUTTER_CHANNEL: stable
      APP_NAME: RustDesk

    steps:
    # 1. 代码检出（包含子模块）
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive  # RustDesk 需要子模块

    # 2. 安装 Flutter（针对 Apple Silicon）
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        architecture: arm64  # 必须为 M1/M2 芯片设置
        cache: true
        cache-key: flutter-arm64

    # 3. 环境验证
    - name: Verify environment
      run: |
        flutter --version
        xcodebuild -version  # 检查 Xcode 版本

    # 4. 清理构建缓存
    - name: Clean workspace
      run: |
        flutter clean
        rm -rf build macos/Pods
        pod cache clean --all

    # 5. 安装依赖
    - name: Install dependencies
      run: |
        flutter pub get
        cd macos
        pod install  # CocoaPods 依赖
        cd ..

    # 6. 构建应用 (关键配置)
    - name: Build macOS bundle
      run: |
        # 启用 bundle 模式确保框架包含
        export BUNDLE_MODE=true
        
        # 构建命令
        flutter build macos \
          --release \
          --dart-define B$BUNDLE_MODE \
          --no-codesign  # 稍后手动签名
        
        # 验证框架存在
        ls -lR build/macos/Build/Products/Release/${{ env.APP_NAME }}.app/Contents/Frameworks

    # 7. 签名应用 (解决崩溃问题的关键)
    - name: Ad-hoc codesigning
      run: |
        cd build/macos/Build/Products/Release
        
        # 先签名 Flutter 框架
        find ${{ env.APP_NAME }}.app -name "*.framework" | while read framework; do
          codesign --force --deep --sign - "$framework"
        done
        
        # 再签名整个应用
        codesign --force --deep --sign - \
          --options runtime \
          --entitlements ../../Runner/Release.entitlements \
          "${{ env.APP_NAME }}.app"
        
        # 验证签名
        codesign -dv --verbose=4 "${{ env.APP_NAME }}.app"

    # 8. 创建 DMG 安装包 (可选但推荐)
    - name: Create DMG installer
      run: |
        brew install create-dmg || brew upgrade create-dmg
        
        cd build/macos/Build/Products/Release
        DMG_NAME="RustDesk-$(date +%Y%m%d).dmg"
        
        create-dmg \
          --volname "RustDesk Installer" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "${{ env.APP_NAME }}.app" 100 100 \
          --app-drop-link 450 100 \
          "$DMG_NAME" \
          .
        
        # 验证文件
        ls -lh *.dmg

    # 9. 上传成品 (使用最新的 v4 版本)
    - name: Upload build artifact
      uses: actions/upload-artifact@v4  # 已升级到 v4
      with:
        name: RustDesk-macOS
        path: |
          build/macos/Build/Products/Release/*.dmg
          build/macos/Build/Products/Release/${{ env.APP_NAME }}.app.zip
        retention-days: 7
